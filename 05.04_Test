#include <stdlib.h>
#include <stdbool.h>

struct St
{
	float f1;
	float f2;
	float f3;
	float f4;
	float f5;
	float f6;
};

void main()
{
	struct St** st;
	st = malloc(5 * sizeof(struct St*));
	for (int i = 0; i < 5; i++)
	{
		struct St* tmp = malloc(sizeof(struct St));
		tmp->f1 = 0;
		tmp->f2 = 0;
		tmp->f3 = 0;
		tmp->f4 = 0;
		tmp->f5 = 0;
		tmp->f6 = 0;
		tmp->f6 = 0;

		st[i] = tmp;
	}

	st[3]->f1 = 50;

	struct St* thirdElement = *(st + 3);
	thirdElement->f1 = 888;
	thirdElement->f2 = 999;
	
	for (int i = 0; i < 5; i++)
	{
		printf("\nst[%i]:\n", i);
		struct St* tmp = *(st + i);
		printf("f1 = %.2f\t", tmp->f1);
		printf("f2 = %.2f\t", tmp->f2);
		printf("f3 = %.2f\t", tmp->f3);
		printf("f4 = %.2f\t", tmp->f4);
		printf("f5 = %.2f\t", tmp->f5);
		printf("f6 = %.2f\t", tmp->f6);

	}

	for (int i = 0; i < 5; i++)
	{
		free(st[i]);
	}
	free(st);
}
--------------------
#include <stdlib.h>
#include <stdbool.h>

struct St
{
	float Data;
	struct St* Next;
	struct St* Previous;
};

void printForward(struct St* list)
{
	printf("=== printForward ===\n");
	while (list != NULL)
	{
		printf("Data: %.2f\n", list->Data);
		list = list->Next;
	}
}

struct St* printBackward(struct St* list)
{
	printf("=== printBackward ===\n");
	struct St* head = NULL;
	while (list != NULL)
	{
		printf("Data: %.2f\n", list->Data);
		
		if (list->Previous != NULL)
		{
			head = list->Previous;
		}
		list = list->Previous;
	}
	return head;
}

struct St* allocItem(float data, struct St* previous)
{
	struct St* item = malloc(sizeof(struct St));
	item->Data = data;
	item->Next = NULL;
	item->Previous = previous;
	
	if (previous != NULL)
	{
		previous->Next = item;
	}

	return item;
}

struct St* addToQueue(struct St* last, struct St* newItem)
{
	last->Next = newItem;
	return last->Next;
}

void main()
{
	struct St* last = allocItem(444.44,
		allocItem(333.33,
			allocItem(222.22,
				allocItem(111.11, NULL))));

	struct St* first = printBackward(last);

	last = addToQueue(last, allocItem(555.55, NULL));
	last = addToQueue(last, allocItem(666.66, NULL));
	last = addToQueue(last, allocItem(777.77, NULL));
	last = addToQueue(last, allocItem(888.88, NULL));
	last = addToQueue(last, allocItem(999.99, NULL));

	printForward(first);
}
